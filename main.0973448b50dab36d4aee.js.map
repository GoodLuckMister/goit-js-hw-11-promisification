{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolved","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","resolve","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACPD,EAASF,KACVA,OAMLI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCfXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAACc,GACDA,EAAQF,EAASG,KAAI,SAAAC,GAAI,OACrCA,EAAKP,OAASI,EAAd,iBACMG,EADN,CACYN,QAASM,EAAKN,SACzBM,UAIJb,EAAS,SAAAc,GAAY,OAAIZ,QAAQa,MAAMD,IAW7CN,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC5BnC,IAGIL,EAAQ,KACNqB,EAAkB,SAACC,GAErB,OAAO,IAAIpB,SAAQ,SAACc,EAASO,GAGzBnB,YAAW,WATe,IAACoB,EAAKC,EAALD,EAUS,IAVJC,EAUS,IAAvCzB,EATD0B,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAU/BE,KAAKE,SAAW,GAGjCZ,EAAQM,EAAYO,GAAI7B,GAExBuB,EAAOD,EAAYO,MAEpB7B,OAOC8B,EAAa,SAACD,GAClBtB,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8C7B,EAA9C,OAGI+B,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAaFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.0973448b50dab36d4aee.js","sourcesContent":["const delay = ms => {\r\n    return new Promise((resolved) => {\r\n        setTimeout(() => {\r\n            resolved(ms);\r\n        }, ms)\r\n\r\n        \r\n    })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\nlet updatedUsers = null;\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve) => {\r\n      updatedUsers = resolve(allUsers.map(user =>\r\n         user.name === userName\r\n        ? { ...user, active: !user.active }\r\n        : user))\r\n  })\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\nlet delay = null;\r\nconst makeTransaction = (transaction) => {\r\n  \r\n    return new Promise((resolve, reject) => {\r\n        \r\n        \r\n        setTimeout(() => {\r\n          delay = randomIntegerFromInterval(200, 500);\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n      resolve(transaction.id, delay);\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n  }, delay);\r\n\r\n})\r\n\r\n};\r\n\r\n\r\nconst logSuccess = (id) => {\r\n  console.log(`Transaction ${id} processed in ${delay}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n"],"sourceRoot":""}